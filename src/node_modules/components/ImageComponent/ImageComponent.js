import PropTypes from 'prop-types';
import React from 'react';
import ReactDOM from 'react-dom';
import classnames from 'classnames';

import './ImageComponent.css';

class ImageComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      placeholderImageLoaded: false,
      imageLoaded: !props.placeholderImageUrl,
      imageError: false,
    };
  }

  componentDidMount() {
    const { image } = this.refs;
    if (image) {
      ReactDOM.findDOMNode(image).addEventListener('error', this.onImageError);
    }
  }

  onImageError = () => this.setState({ imageError: true });
  onImageLoad = () => this.setState({ imageLoaded: true });

  onPlaceholderImage = () => this.setState({ placeholderImageLoaded: true });

  renderLoader() {
    if (this.state.placeholderImageLoaded && !this.state.imageLoaded) {
      return (
        <div className="image__loader">
          <div className="image__l__bar"></div>
          <div className="image__l__bar"></div>
          <div className="image__l__bar"></div>
          <div className="image__l__bar"></div>
        </div>
      );
    }
    return null;
  }

  render() {
    const {
      imageUrl,
      placeholderImageUrl,
      classname,
      alt,
      border,
      height,
      sizes,
      srcset,
      longdesc,
      ismap,
      } = this.props;
    const imageContClass = classnames('image-cont', classname, {
      'main-image--loaded': this.state.imageLoaded,
      'main-image--error': this.state.imageError
    });

    return (
      <div className={imageContClass}>
        <img
          className="main-image__placeholder"
          src={placeholderImageUrl || imageUrl}
          role="presentation"
          onLoad={this.onPlaceholderImage}
          alt={alt}
          border={border}
          height={height}
          sizes={sizes}
          srcset={srcset}
          longdesc={longdesc}
          ismap={ismap}
        />
        <img
          className="main-image__image"
          src={imageUrl}
          role="presentation"
          onLoad={this.onImageLoad}
          ref="image"
          alt={alt}
          border={border}
          height={height}
          sizes={sizes}
          srcset={srcset}
          longdesc={longdesc}
          ismap={ismap}
        />
        {this.renderLoader()}
      </div>
    );
  }
}

ImageComponent.propTypes = {
  imageUrl: PropTypes.string.isRequired,
  placeholderImageUrl: PropTypes.string,
  classname: PropTypes.string,
  alt: PropTypes.string,
  border: PropTypes.string,
  height: PropTypes.string,
  sizes: PropTypes.string,
  srcset: PropTypes.string,
  longdesc: PropTypes.string,
  ismap: PropTypes.string,
};

export default ImageComponent;
